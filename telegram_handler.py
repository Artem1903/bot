import httpx
import logging
from dialog_tree import dialog_tree
from state_manager import get_state, set_state, reset_state
from send_to_admin import send_telegram_message

TOKEN = "7601158787:AAE52sbM7kd6DfBWpXPnr0_Q1w4y9am5h9o"
ADMIN = "842014271"
API_URL = f"https://api.telegram.org/bot{TOKEN}/sendMessage"

logging.basicConfig(level=logging.INFO)

WELCOME_SENT = {}  # –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

async def handle_telegram_webhook(payload):
    try:
        message = payload.get("message", {})
        chat_id = message.get("chat", {}).get("id")
        text = message.get("text", "").strip() if "text" in message else None

        if not chat_id:
            return {"ok": False}

        state = get_state(chat_id)

        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if chat_id not in WELCOME_SENT:
            WELCOME_SENT[chat_id] = True
            await send_message(chat_id, dialog_tree["start"]["message"])
            return {"ok": True}

        # –ï—Å–ª–∏ —Ü–∏—Ñ—Ä–∞
        if text and text.isdigit():
            if text == "0":
                reset_state(chat_id)
                await send_message(chat_id, dialog_tree["start"]["message"])
                return {"ok": True}

            if text == "9" and state == "awaiting_online_data":
                await send_telegram_message(ADMIN, f"‚ùå –û—Ç–º–µ–Ω–∞ –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å–∏ –æ—Ç {chat_id}")
                reset_state(chat_id)
                await send_message(chat_id, "üö´ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return {"ok": True}

            if state == "awaiting_offline_data":
                await send_message(chat_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!\n‚òéÔ∏è +7 747 4603509")
                await send_telegram_message(ADMIN, f"üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å (–û–ß–ù–û):\n{text}")
                reset_state(chat_id)
                return {"ok": True}

            if state == "awaiting_online_data":
                await send_message(chat_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!\n‚òéÔ∏è +7 747 4603509")
                await send_telegram_message(ADMIN, f"üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å (–û–ù–õ–ê–ô–ù):\n{text}")
                reset_state(chat_id)
                return {"ok": True}

            if state == "price_categories" and text in dialog_tree["price_categories"]["options"]:
                next_key = dialog_tree["price_categories"]["options"][text]
                response = dialog_tree[next_key]["message"]
                await send_message(chat_id, response)
                if text == "0":
                    reset_state(chat_id)
                else:
                    set_state(chat_id, "price_categories")
                return {"ok": True}

            if text in dialog_tree["start"]["options"]:
                next_key = dialog_tree["start"]["options"][text]
                response = dialog_tree[next_key]["message"]
                await send_message(chat_id, response)
                if text == "1":
                    set_state(chat_id, "awaiting_offline_data")
                elif text == "2":
                    set_state(chat_id, "awaiting_online_data")
                elif text == "3":
                    set_state(chat_id, "price_categories")
                else:
                    reset_state(chat_id)
                return {"ok": True}

        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç/–º–µ–¥–∏–∞ –∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–∏—Å–∏
        if state not in ["awaiting_offline_data", "awaiting_online_data"]:
            await send_message(chat_id,
                "ü§ñ –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç-–±–æ—Ç. –Ø –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–∏—Ä–∞–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ü–∏—Ñ—Ä—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é.\n"
                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É, –Ω–∞–∂–º–∏—Ç–µ 0."
            )
            return {"ok": True}

        return {"ok": True}

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ telegram_handler: {e}")
        return {"ok": False}

async def send_message(chat_id, text):
    async with httpx.AsyncClient() as client:
        await client.post(API_URL, json={
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        })
