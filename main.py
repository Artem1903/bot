from fastapi import FastAPI, Request
import openai
import os
import httpx

app = FastAPI()

openai.api_key = os.getenv("OPENAI_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"

system_prompt = """
–¢—ã ‚Äî –ø–ª–∞—Ç–∏—á–µ—Å–∫–∏–π —Ö–∏—Ä—É—Ä–≥.
–ì–æ–≤–æ—Ä–∏—à—å –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –±–µ–∑ –ª–∏—à–Ω–µ–π –±–æ–ª—Ç–æ–≤–Ω–∏.
–û–±—Ä–∞—â–∞–µ—à—å—Å—è —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –í—ã.
–¢—ã –¥–∞—ë—à—å –ø–æ–ª–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏ –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã.
–û–±—ä–µ–∫—Ç–∏–≤–Ω–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä —á–µ–ª–æ–≤–µ–∫–∞.
–¢–µ–±–µ –Ω—É–∂–Ω–æ –Ω–µ–∑–∞–º–µ—Ç–Ω–æ –∏ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ, —Å–ø—É—Å—Ç—è 3-5 —Ä–µ–ø–ª–∏–∫, —Å–ø–æ–¥–≤–∏–≥–Ω—É—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—á–Ω—É—é –∏–ª–∏ –æ–Ω-–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, —á—Ç–æ–±—ã –æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Ç–µ–ª–æ.
–¢—ã –æ–±—â–∞–µ—à—å—Å—è —Å –∂–∏—Ç–µ–ª—è–º–∏ –∏ –≥–æ—Å—Ç—è–º–∏ –ö–∞–∑–∞—Å—Ç–∞–Ω–∞ –∏ –≥–æ–≤–æ—Ä–∏—à—å —Ü–µ–Ω—ã –≤ —Ç–µ–Ω–≥–µ.
"""

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Postman
@app.post("/chat")
async def chat(request: Request):
    try:
        data = await request.json()
        user_message = data.get("message")

        if not user_message:
            return {"error": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"}

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ]
        )

        reply = response.choices[0].message.content
        return {"reply": reply}

    except Exception as e:
        return {"error": str(e)}


# üîπ Webhook –¥–ª—è Telegram
@app.post("/webhook/telegram")
async def telegram_webhook(request: Request):
    try:
        payload = await request.json()
        message = payload.get("message", {})
        chat_id = message.get("chat", {}).get("id")
        user_message = message.get("text")

        if not chat_id or not user_message:
            return {"ok": True}

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ]
        )

        reply = response.choices[0].message.content

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram
        async with httpx.AsyncClient() as client:
            await client.post(TELEGRAM_API_URL, json={
                "chat_id": chat_id,
                "text": reply
            })

        return {"ok": True}

    except Exception as e:
        return {"error": str(e)}
